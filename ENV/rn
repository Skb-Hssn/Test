#!/bin/bash

black=$(tput setaf 0);
green=$(tput setaf 1);
navy=$(tput setaf 4);
purple=$(tput setaf 5);
grey=$(tput setaf 8);
silver=$(tput setaf 7);
red=$(tput setaf 9);
lime=$(tput setaf 10);
yellow=$(tput setaf 11);
blue=$(tput setaf 12);
cyan=$(tput setaf 51);
chartreuse2=$(tput setaf 82);
greenYellow=$(tput setaf 154);
grey62=$(tput setaf 247);
orangeRed1=$(tput setaf 202);
springGreen=$(tput setaf 135);

bold=$(tput bold);
reset=$(tput sgr0);


printLine () {
    printf "${grey}"
    for ((i=0;i<$1;i++)) 
    do
        printf "-"
    done

    printf "${reset}"
    echo ""
}

printWord () {
    printf "${orangeRed1}${bold}"

    printf "$1:"

    printf "${reset}"
    echo ""
}

printCompile () {
    echo "${grey}${bold}Compiling $1.cpp........${reset}"
    echo "${grey}${bold}Compilation finished.${reset}"
    printLine 50
}

compile () {
    echo "${grey}${bold}Compiling ${silver}$1.cpp${reset}"

    g++ -std=c++17 -Wshadow -Wall -o $1 -Wno-unused-result $1.cpp

    if [ $? -eq 0 ]
    then
        echo "${grey}${bold}Compilation finished.${reset}"
        printLine 23
        return 0
    else 
        printLine 40
        return 1
    fi
}

compile_with_debug () {

    echo "${grey}${bold}Compiling[Debug] ${silver}$1.cpp${reset}"

    g++ -std=c++17  -Wall -Wextra -pedantic -Wshadow -Wformat=2 -Wfloat-equal -Wconversion -Wlogical-op -Wshift-overflow=2 -Wduplicated-cond -Wcast-qual -Wcast-align -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -D_FORTIFY_SOURCE=2 -fsanitize=address -fsanitize=undefined -fno-sanitize-recover -fstack-protector -o $1 -Wno-unused-result $1.cpp

    if [ $? -eq 0 ]
    then
        echo "${grey}${bold}Compilation finished.${reset}"
        printLine 23
        return 0
    else 
        printLine 40
        return 1
    fi
}


if [ $# -eq 1 ]
then 
    compile $1
    if [ $? -eq 0 ]
    then
        g=${grey}
        s=${silver}
        r=${reset}

        /usr/bin/time -f "$g-----------------\n  Real: $s%e$r$g sec\n  User: $s%U$r$g sec\nMemory: $s%M$r$g KB${reset}" ./$1
    fi
else
    file=$1
    shift 1
    command=""
    for var in $@
    do
        if [ "$var" = "i" ]
        then
            compile $file
            if [ $? -eq 0 ]
            then
                printWord "Input"
                cat $file.in1

                if [ -z "$(tail -c 1 $file.in1)" ]
                then
                    printf ""
                else
                    echo ""
                fi

                printWord "Output"

                g=${grey}
                s=${silver}
                r=${reset}

                /usr/bin/time -f "$g---------------\nReal:  $s%e$r$g sec\nUser:  $s%U$r$g sec\nMemory: $s%M$r$g KB${reset}" ./$file < $file.in1
            fi
            break
        fi

        if [ "$var" = "p" ]
        then
            compile $file
            if [ $? -eq 0 ]
            then
                xclip -selection clipboard -o > $file.in1

                printWord "Input"
                cat $file.in1

                if [ -z "$(tail -c 1 $file.in1)" ]
                then
                    printf ""
                else
                    echo ""
                fi

                printWord "Output"

                g=${grey}
                s=${silver}
                r=${reset}

                /usr/bin/time -f "$g---------------\nReal:  $s%e$r$g sec\nUser:  $s%U$r$g sec\nMemory: $s%M$r$g KB${reset}" ./$file < $file.in1

            fi
            break
        fi

        if [ "$var" = "o" ]
        then
            compile $file
            if [ $? -eq 0 ]
            then
                xclip -selection clipboard -o > $file.in1

                g=${grey}
                s=${silver}
                r=${reset}

                /usr/bin/time -f "$g---------------\nReal:  $s%e$r$g sec\nUser:  $s%U$r$g sec\nMemory: $s%M$r$g KB${reset}" ./$file < $file.in1 > output.txt
            fi
            break
        fi

        if [ "$var" = "c" ]
        then
            compile $file
            break
        fi

        if [ "$var" = "d" ]
        then
            compile_with_debug $file
            break
        fi

        if [ "$var" = "f" ]
        then

            if [ $# -lt 2 ]
            then
                echo "${red}No input file${reset}"
            else
                compile $file
                if [ $? -eq 0 ]
                then
                    shift 1

                    for inFile in $@ 
                    do
                        if [ ! -f "$inFile" ]
                        then
                            echo "${red}($inFile) does not exist.${reset}"
                            echo ""
                        else

                            printWord "Input($inFile)"
                            cat $inFile

                            if [ -z "$(tail -c 1 $inFile)" ]
                            then
                                printf ""
                            else
                                echo ""
                            fi

                            printWord "Output"

                            g=${grey}
                            s=${silver}
                            r=${reset}

                            /usr/bin/time -f "$g---------------\nReal:  $s%e$r$g sec\nUser:  $s%U$r$g sec\nMemory: $s%M$r$g KB${reset}" ./$file < $inFile
                            echo ""

                        fi

                    done

                fi
            fi

            break
        fi

    done
fi

# 
# Options : 
# i 
# o
# p
# c
# d
# f
# 
# 
# 
# 
# 
# 
# 
# 

